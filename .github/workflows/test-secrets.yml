name: Test Secrets Output

on:
  workflow_dispatch:
    inputs:
      deployEnvironment:
        type: choice
        description: the target environment to deploy
        required: true
        options:
          - PRO
          - QA


jobs:
  test-secret-output:
    name: print hard coded environments from a matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [FOO_ENV_12, FOO_ENV_13, FOO_ENV_14]
    environment: ${{ matrix.environment }}
    steps:
      - name: Output Secrets
        run: |
          for i in {1..3}
          do
            secret_name="FOO_SECRET_$i"
            secret_value="${!secret_name}"
            echo "$secret_name: ${secret_value:0:1} ${secret_value:1}"
          done
        env:
          FOO_SECRET_1: ${{ secrets.FOO_SECRET_1 }}
          FOO_SECRET_2: ${{ secrets.FOO_SECRET_2 }}
          FOO_SECRET_3: ${{ secrets.FOO_SECRET_3 }}

  extract-tenant-configs:
    name: Extracts tenants config path, customer and customerEnvironment
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.matrix.outputs.value }}

    steps:
        - uses: actions/checkout@v4
        - id: matrix
        # this will return an array of objects, which represends a matrix to include
        # [
        # {"path":"deployment-configs/QA/customer1/ci.tenant.env", "customer":"customer1", "customerEnv": QA_CUSTOMER1},
        # {"path":"deployment-configs/QA/customer2/ci.tenant.env", "customer":"customer2", "customerEnv": QA_CUSTOMER2}
        # ]
          name: create tenant config matrix
          run: |
            matrix_output=$(find deployment-configs/${{inputs.deployEnvironment}} -type f -name 'ci.tenant.env' -not -path '*/shared/*' | while read -r file; do
              customer_name=$(basename $(dirname "$file"))
              echo "{\"path\":\"$file\", \"customer\":\"$customer_name\", \"customerEnv\": \"$(echo ${{inputs.deployEnvironment}}_${customer_name}|tr '[:lower:]' '[:upper:]')\"},"
            done | sed '$ s/,$//')
            matrix_output=$(echo "[$matrix_output]")
            echo value=${matrix_output} >> $GITHUB_OUTPUT
  
  print-env-customer-secrets:
    needs: [extract-tenant-configs]
    runs-on: ubuntu-latest
    name: print customer environment specific secrets

    strategy:
      matrix:
        include: ${{ fromJson(needs.extract-tenant-configs.outputs.matrix) }}
    environment: ${{matrix.customerEnv}}
    env:
      DB_PASSWORD: ${{secrets.DB_PASSWORD}}
    outputs:
      result: ${{ steps.outputSecrets.outputs.value }}
    steps:
        - name: Output Secrets
          id: outputSecrets
          run: |
            echo ${{matrix.customer}}
            echo ${{matrix.customerEnv}}
            echo ${{secrets.DB_PASSWORD}}
            # in order to prevent log masking we put a whitespace inside
            echo ${DB_PASSWORD:0:1} ${DB_PASSWORD:1} 
            echo value="{\"successful\": true, \"customer\": \"$customer\"}" >> $GITHUB_OUTPUT
            
  substitute-config-file:
    needs: [print-env-customer-secrets]
    runs-on: ubuntu-latest
    name: substitution
    steps:
      - name: Replace config file
        run: |
          echo ${{ fromJson(needs.print-env-customer-secrets.outputs.result).successful }}

